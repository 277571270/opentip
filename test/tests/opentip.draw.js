// Generated by CoffeeScript 1.3.3
var $,
  __hasProp = {}.hasOwnProperty;

$ = ender;

describe("Opentip - Drawing", function() {
  var adapter, opentip;
  adapter = Opentip.adapters["native"];
  opentip = null;
  beforeEach(function() {
    return Opentip.adapter = adapter;
  });
  afterEach(function() {
    var prop, _ref;
    for (prop in opentip) {
      if (!__hasProp.call(opentip, prop)) continue;
      if ((_ref = opentip[prop]) != null) {
        if (typeof _ref.restore === "function") {
          _ref.restore();
        }
      }
    }
    opentip.deactivate();
    return $(".opentip-container").remove();
  });
  return describe("_draw()", function() {
    beforeEach(function() {
      var triggerElementExists;
      triggerElementExists = false;
      opentip = new Opentip(adapter.create("<div></div>"), "Test", {
        delay: 0
      });
      return sinon.stub(opentip, "_triggerElementExists", function() {
        return true;
      });
    });
    it("should abort if @redraw not set", function() {
      sinon.stub(opentip, "debug");
      opentip.backgroundCanvas = document.createElement("canvas");
      opentip.redraw = false;
      opentip._draw();
      return expect(opentip.debug.callCount).to.be(0);
    });
    it("should abort if no canvas not set", function() {
      sinon.stub(opentip, "debug");
      opentip.redraw = true;
      opentip._draw();
      return expect(opentip.debug.callCount).to.be(0);
    });
    return it("should draw if canvas and @redraw", function() {
      sinon.stub(opentip, "debug");
      opentip.backgroundCanvas = document.createElement("canvas");
      opentip.redraw = true;
      opentip._draw();
      expect(opentip.debug.callCount).to.be.above(0);
      return expect(opentip.debug.args[0][0]).to.be("Drawing background.");
    });
  });
});

// Generated by CoffeeScript 1.3.3

describe("utils", function() {
  describe("debug()", function() {
    var consoleDebug;
    consoleDebug = console.debug;
    beforeEach(function() {
      return sinon.stub(console, "debug");
    });
    afterEach(function() {
      return console.debug.restore();
    });
    it("should only debug when Opentip.debug == true", function() {
      Opentip.debug = false;
      Opentip.prototype.debug("test");
      expect(console.debug.called).to.not.be.ok();
      Opentip.debug = true;
      Opentip.prototype.debug("test");
      return expect(console.debug.called).to.be.ok();
    });
    return it("should include the opentip id", function() {
      var opentip;
      Opentip.debug = true;
      opentip = new Opentip(document.createElement("span"));
      opentip.debug("test");
      return expect(console.debug.getCall(0).args[0]).to.be("#" + opentip.id + " |");
    });
  });
  describe("sanitizePosition()", function() {
    it("should properly camelize positions", function() {
      expect(Opentip.prototype.sanitizePosition("top-left").toString()).to.eql("topLeft");
      expect(Opentip.prototype.sanitizePosition("top-Right").toString()).to.eql("topRight");
      return expect(Opentip.prototype.sanitizePosition("BOTTOM left").toString()).to.eql("bottomLeft");
    });
    it("should handle any order of positions", function() {
      expect(Opentip.prototype.sanitizePosition("right bottom").toString()).to.eql("bottomRight");
      expect(Opentip.prototype.sanitizePosition("left left middle").toString()).to.eql("left");
      return expect(Opentip.prototype.sanitizePosition("left - top").toString()).to.eql("topLeft");
    });
    it("should throw an exception if unknonwn position", function() {
      try {
        Opentip.prototype.sanitizePosition("center middle");
        expect(false).to.be.ok();
      } catch (e) {

      }
      try {
        Opentip.prototype.sanitizePosition("");
        return expect(false).to.be.ok();
      } catch (e) {

      }
    });
    return it("should add .bottom, .left etc... properties on the position", function() {
      var positions, testCount, testPositions;
      positions = {
        top: false,
        bottom: false,
        middle: false,
        left: false,
        center: false,
        right: false
      };
      testCount = sinon.stub();
      testPositions = function(position, thisPositions) {
        var positionName, shouldBeTrue, _results;
        thisPositions = Opentip.adapters["native"].extend({}, positions, thisPositions);
        _results = [];
        for (positionName in thisPositions) {
          shouldBeTrue = thisPositions[positionName];
          testCount();
          if (shouldBeTrue) {
            _results.push(expect(position[positionName]).to.be.ok());
          } else {
            _results.push(expect(position[positionName]).to.not.be.ok());
          }
        }
        return _results;
      };
      testPositions(Opentip.prototype.sanitizePosition("top"), {
        center: true,
        top: true
      });
      testPositions(Opentip.prototype.sanitizePosition("top right"), {
        right: true,
        top: true
      });
      testPositions(Opentip.prototype.sanitizePosition("right"), {
        right: true,
        middle: true
      });
      testPositions(Opentip.prototype.sanitizePosition("bottom right"), {
        right: true,
        bottom: true
      });
      testPositions(Opentip.prototype.sanitizePosition("bottom"), {
        center: true,
        bottom: true
      });
      testPositions(Opentip.prototype.sanitizePosition("bottom left"), {
        left: true,
        bottom: true
      });
      testPositions(Opentip.prototype.sanitizePosition("left"), {
        left: true,
        middle: true
      });
      testPositions(Opentip.prototype.sanitizePosition("top left"), {
        left: true,
        top: true
      });
      return expect(testCount.callCount).to.be(6 * 8);
    });
  });
  describe("flipPosition()", function() {
    it("should properly flip the position", function() {
      expect(Opentip.prototype.flipPosition(Opentip.prototype.sanitizePosition("top")).toString()).to.be("bottom");
      expect(Opentip.prototype.flipPosition(Opentip.prototype.sanitizePosition("bottomRight")).toString()).to.be("topLeft");
      expect(Opentip.prototype.flipPosition(Opentip.prototype.sanitizePosition("left top")).toString()).to.be("bottomRight");
      return expect(Opentip.prototype.flipPosition(Opentip.prototype.sanitizePosition("bottom")).toString()).to.be("top");
    });
    return it("should return a sanitized position", function() {
      var flipped;
      flipped = Opentip.prototype.flipPosition(Opentip.prototype.sanitizePosition("top"));
      return expect(flipped.bottom).to.be.ok();
    });
  });
  describe("ucfirst()", function() {
    return it("should transform the first character to uppercase", function() {
      return expect(Opentip.prototype.ucfirst("abc def")).to.equal("Abc def");
    });
  });
  describe("dasherize()", function() {
    return it("should transform camelized words into dasherized", function() {
      return expect(Opentip.prototype.dasherize("testAbcHoiTEST")).to.equal("test-abc-hoi-t-e-s-t");
    });
  });
  describe("_positionsEqual()", function() {
    return it("should properly compare positions", function() {
      var eq;
      eq = Opentip.prototype._positionsEqual;
      expect(eq({
        left: 0,
        top: 0
      }, {
        left: 0,
        top: 0
      })).to.be.ok();
      expect(eq({
        left: 100,
        top: 20
      }, {
        left: 100,
        top: 20
      })).to.be.ok();
      expect(eq({
        left: 100,
        top: 20
      }, {
        left: 101,
        top: 20
      })).to.not.be.ok();
      expect(eq(null, {
        left: 101,
        top: 20
      })).to.not.be.ok();
      return expect(eq(null, null)).to.not.be.ok();
    });
  });
  describe("setCss3Style()", function() {
    var adapter, opentip;
    Opentip.adapter = adapter = Opentip.adapters["native"];
    opentip = new Opentip(adapter.create("<div></div>"), "Test");
    return it("should set the style for all vendors", function() {
      var element;
      element = document.createElement("div");
      opentip.setCss3Style(element, {
        opacity: "0.5",
        "transition-duration": "1s"
      });
      expect(element.style["-moz-transition-duration"]).to.be("1s");
      expect(element.style["-moz-opacity"]).to.be("0.5");
      expect(element.style["-webkit-transition-duration"]).to.be("1s");
      return expect(element.style["-o-transition-duration"]).to.be("1s");
    });
  });
  describe("defer()", function() {
    return it("should call the callback as soon as possible");
  });
  return describe("setTimeout()", function() {
    return it("should wrap window.setTimeout but with seconds");
  });
});

// Generated by CoffeeScript 1.3.3

describe("utils", function() {
  describe("debug()", function() {
    var consoleDebug;
    consoleDebug = console.debug;
    beforeEach(function() {
      return sinon.stub(console, "debug");
    });
    afterEach(function() {
      return console.debug.restore();
    });
    it("should only debug when Opentip.debug == true", function() {
      Opentip.debug = false;
      Opentip.prototype.debug("test");
      expect(console.debug.called).to.not.be.ok();
      Opentip.debug = true;
      Opentip.prototype.debug("test");
      return expect(console.debug.called).to.be.ok();
    });
    return it("should include the opentip id", function() {
      var opentip;
      Opentip.debug = true;
      opentip = new Opentip(document.createElement("span"));
      opentip.debug("test");
      return expect(console.debug.getCall(0).args[0]).to.be("#" + opentip.id + " |");
    });
  });
  describe("sanitizePosition()", function() {
    it("should properly camelize positions", function() {
      expect(Opentip.prototype.sanitizePosition("top-left")).to.equal("topLeft");
      expect(Opentip.prototype.sanitizePosition("top-Right")).to.equal("topRight");
      return expect(Opentip.prototype.sanitizePosition("BOTTOM left")).to.equal("bottomLeft");
    });
    return it("should handle any order of positions", function() {
      expect(Opentip.prototype.sanitizePosition("right bottom")).to.equal("bottomRight");
      expect(Opentip.prototype.sanitizePosition("left left middle")).to.equal("left");
      return expect(Opentip.prototype.sanitizePosition("left - top")).to.equal("topLeft");
    });
  });
  describe("ucfirst()", function() {
    return it("should transform the first character to uppercase", function() {
      return expect(Opentip.prototype.ucfirst("abc def")).to.equal("Abc def");
    });
  });
  describe("dasherize()", function() {
    return it("should transform camelized words into dasherized", function() {
      return expect(Opentip.prototype.dasherize("testAbcHoiTEST")).to.equal("test-abc-hoi-t-e-s-t");
    });
  });
  return describe("setCss3Style()", function() {
    var adapter, opentip;
    Opentip.adapter = adapter = Opentip.adapters["native"];
    opentip = new Opentip(adapter.create("<div></div>"), "Test");
    return it("should set the style for all vendors", function() {
      var element;
      element = document.createElement("div");
      opentip.setCss3Style(element, {
        opacity: "0.5",
        "transition-duration": "1s"
      });
      expect(element.style["-moz-transition-duration"]).to.be("1s");
      expect(element.style["-moz-opacity"]).to.be("0.5");
      expect(element.style["-webkit-transition-duration"]).to.be("1s");
      return expect(element.style["-o-transition-duration"]).to.be("1s");
    });
  });
});

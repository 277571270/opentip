// Generated by CoffeeScript 1.3.3
/*
#
# More info at [www.opentip.org](http://www.opentip.org)
# 
# Copyright (c) 2012, Matias Meno  
# Graphics by Tjandra Mayerhold
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
*/

var Opentip,
  __slice = [].slice;

Opentip = (function() {

  Opentip.prototype.STICKS_OUT_TOP = 1;

  Opentip.prototype.STICKS_OUT_BOTTOM = 2;

  Opentip.prototype.STICKS_OUT_LEFT = 1;

  Opentip.prototype.STICKS_OUT_RIGHT = 2;

  Opentip.prototype.lastTipId = 0;

  Opentip.prototype.lastZIndex = 100;

  Opentip.prototype.position = {
    top: 0,
    topRight: 1,
    right: 2,
    bottomRight: 3,
    bottom: 4,
    bottomLeft: 5,
    left: 6,
    topLeft: 7
  };

  function Opentip(element, content, title, options) {
    var optionSources, styleOptions, _ref;
    this.id = ++this.lastTipId;
    this.adapter = Opentip.adapter;
    this.triggerElement = element = this.adapter.wrap(element);
    this.loaded = false;
    this.loading = false;
    this.visible = false;
    this.waitingToShow = false;
    this.waitingToHide = false;
    this.lastPosition = {
      left: 0,
      top: 0
    };
    this.dimensions = [100, 50];
    this.content = "";
    options = this.adapter.clone(options);
    if (typeof content === "object") {
      options = content;
      content = title = void 0;
    } else if (typeof title === "object") {
      options = title;
      title = void 0;
    }
    if (title != null) {
      options.title = title;
    }
    if (content != null) {
      this.setContent(content);
    }
    if (options.ajax && !(options.ajax.url != null)) {
      if (this.adapter.tagName(this.triggerElement) === "A") {
        if (typeof options.ajax !== "object") {
          options.ajax = {};
        }
        options.ajax.url = this.adapter.attr(this.triggerElement, "href");
      } else {
        options.ajax = false;
      }
    }
    if (options.showOn === "click" && this.adapter.tagName(this.triggerElement) === "A") {
      this.adapter.observe(this.triggerElement, "click", (function() {}), "stop propagation");
    }
    if (!options.style) {
      options.style = Opentip.defaultStyle;
    }
    styleOptions = this.adapter.extend({}, Opentip.styles.standard);
    optionSources = [];
    optionSources.push(Opentip.styles.standard);
    if (options.style !== "standard") {
      optionSources.push(Opentip.styles[options.style]);
    }
    optionSources.push(options);
    options = (_ref = this.adapter).extend.apply(_ref, [{}].concat(__slice.call(optionSources)));
    this.options = options;
  }

  Opentip.prototype.build = function() {};

  Opentip.prototype.setContent = function(content) {
    this.content = content;
    if (this.visible) {
      return this.updateElementContent();
    }
  };

  Opentip.prototype.updateElementContent = function() {};

  return Opentip;

})();

Opentip.prototype.ucfirst = function(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

Opentip.prototype.sanitizePosition = function(arrayPosition) {
  var position, positionString;
  if (arrayPosition instanceof Array) {
    positionString = "";
    if (arrayPosition[0] === "center") {
      positionString = arrayPosition[1];
    } else if (arrayPosition[1] === "middle") {
      positionString = arrayPosition[0];
    } else {
      positionString = arrayPosition[1] + this.ucfirst(arrayPosition[0]);
    }
  } else if (typeof arrayPosition === "string") {
    positionString = arrayPosition;
  }
  position = this.position[positionString];
  if (position == null) {
    throw "Unknown position: " + positionString;
  }
  return position;
};

Opentip.prototype.debug = function() {
  if (this.debugging && ((typeof console !== "undefined" && console !== null ? console.debug : void 0) != null)) {
    return console.debug.apply(console, arguments);
  }
};

Opentip.version = "2.0.0-dev";

Opentip.debugging = false;

Opentip.adapters = {};

Opentip.adapter = null;

Opentip.documentIsLoaded = false;

Opentip.styles = {
  standard: {
    title: void 0,
    className: "standard",
    stem: false,
    delay: null,
    hideDelay: 0.1,
    fixed: false,
    showOn: "mouseover",
    hideTrigger: "trigger",
    hideOn: null,
    offset: [0, 0],
    containInViewport: true,
    autoOffset: true,
    showEffect: "appear",
    hideEffect: "fade",
    showEffectDuration: 0.3,
    hideEffectDuration: 0.2,
    stemSize: 8,
    tipJoint: ["left", "top"],
    target: null,
    targetJoint: null,
    ajax: false,
    group: null,
    escapeHtml: false,
    style: null
  },
  slick: {
    className: "slick",
    stem: true
  },
  rounded: {
    className: "rounded",
    stem: true
  },
  glass: {
    className: "glass"
  }
};

Opentip.defaultStyle = "standard";

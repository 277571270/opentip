// Generated by CoffeeScript 1.3.3
var $, Adapter,
  __slice = [].slice;

$ = jQuery;

$.fn.opentip = function(content, title, options) {
  return new Opentip(this, content, title, options);
};

Adapter = (function() {

  function Adapter() {}

  Adapter.prototype.name = "jquery";

  Adapter.prototype.domReady = function(callback) {
    return $.domReady(callback);
  };

  Adapter.prototype.create = function(html) {
    return $(html);
  };

  Adapter.prototype.wrap = function(element) {
    element = $(element);
    if (element.length > 1) {
      throw new Error("Multiple elements provided.");
    }
    return element;
  };

  Adapter.prototype.unwrap = function(element) {
    return $(element)[0];
  };

  Adapter.prototype.tagName = function(element) {
    return this.unwrap(element).tagName;
  };

  Adapter.prototype.attr = function(element, attr, value) {
    return $(element).attr(attr, value);
  };

  Adapter.prototype.data = function(element, name, value) {
    return $(element).data(name, value);
  };

  Adapter.prototype.find = function(element, selector) {
    return $(element).find(selector);
  };

  Adapter.prototype.findAll = function() {
    return this.find.apply(this, arguments);
  };

  Adapter.prototype.update = function(element, content, escape) {
    element = $(element);
    if (escape) {
      return element.text(content);
    } else {
      return element.html(content);
    }
  };

  Adapter.prototype.append = function(element, child) {
    return $(element).append(child);
  };

  Adapter.prototype.addClass = function(element, className) {
    return $(element).addClass(className);
  };

  Adapter.prototype.removeClass = function(element, className) {
    return $(element).removeClass(className);
  };

  Adapter.prototype.css = function(element, properties) {
    return $(element).css(properties);
  };

  Adapter.prototype.dimensions = function(element) {
    return {
      width: $(element).width(),
      height: $(element).height()
    };
  };

  Adapter.prototype.mousePosition = function(e) {
    return {
      x: e.pageX,
      y: e.pageY
    };
  };

  Adapter.prototype.offset = function(element) {
    return $(element).offset();
  };

  Adapter.prototype.observe = function(element, eventName, observer) {
    return $(element).bind(eventName, observer);
  };

  Adapter.prototype.stopObserving = function(element, eventName, observer) {
    return $(element).unbind(eventName, observer);
  };

  Adapter.prototype.clone = function(object) {
    return $.extend({}, object);
  };

  Adapter.prototype.extend = function() {
    var sources, target;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return $.extend.apply($, [target].concat(__slice.call(sources)));
  };

  return Adapter;

})();

Opentip.addAdapter(new Adapter);

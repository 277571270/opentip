// Generated by CoffeeScript 1.3.3
var $, Adapter, adapter, bean,
  __hasProp = {}.hasOwnProperty,
  __slice = [].slice;

$ = ender;

bean = require("bean");

$.ender({
  opentip: function(content, title, options) {
    return new Opentip(this, content, title, options);
  }
}, true);

Adapter = (function() {

  function Adapter() {}

  Adapter.prototype.name = "Ender";

  Adapter.prototype.domReady = function(callback) {
    return $.domReady(callback);
  };

  Adapter.prototype.create = function(html) {
    return $(html);
  };

  Adapter.prototype.wrap = function(element) {
    element = $(element);
    if (element.length > 1) {
      throw new Error("Multiple elements provided.");
    }
    return element;
  };

  Adapter.prototype.tagName = function(element) {
    return $(element).get(0).tagName;
  };

  Adapter.prototype.attr = function(element, attr, value) {
    return $(element).attr(attr, value);
  };

  Adapter.prototype.addClass = function(element, className) {
    return $(element).addClass(className);
  };

  Adapter.prototype.removeClass = function(element, className) {
    return $(element).removeClass(className);
  };

  Adapter.prototype.observe = function(element, eventName, observer, stopPropagation) {
    var obs;
    obs = function(e) {
      if (stopPropagation) {
        e.stop();
      }
      return observer.apply(this, arguments);
    };
    return $(element).on(eventName, obs);
  };

  Adapter.prototype.clone = function(object) {
    var key, newObject, val;
    newObject = {};
    for (key in object) {
      if (!__hasProp.call(object, key)) continue;
      val = object[key];
      newObject[key] = val;
    }
    return newObject;
  };

  Adapter.prototype.extend = function() {
    var key, source, sources, target, val, _i, _len;
    target = arguments[0], sources = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = sources.length; _i < _len; _i++) {
      source = sources[_i];
      for (key in source) {
        if (!__hasProp.call(source, key)) continue;
        val = source[key];
        target[key] = val;
      }
    }
    return target;
  };

  return Adapter;

})();

adapter = new Adapter;

Opentip.adapters.ender = adapter;

Opentip.adapter = adapter;
